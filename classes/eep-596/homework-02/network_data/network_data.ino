#include <TensorFlowLite.h>
#include "network_model.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"
#include "tensorflow/lite/micro/micro_interpreter.h"
#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/version.h"

#define NUMBER_OF_INPUTS 38
#define NUMBER_OF_OUTPUTS 1
#define TENSOR_ARENA_SIZE 100*1024

uint8_t tensor_arena[TENSOR_ARENA_SIZE];
tflite::ErrorReporter* error_reporter;
tflite::MicroInterpreter* interpreter;
TfLiteTensor* input;
TfLiteTensor* output;

const float X_test[10][38] = {
    -0.11024922321249885, -0.12470615670462065, -0.44208308523109213, 
    0.7511112872365361, -0.007728682023723982, -0.00482787665965922, 
    -0.08948642202040107, -0.09507567152556495, 1.2356940323701657, 
    -0.011663642603760032, -0.036651869142258646, -0.024436507262009306, 
    -0.01238515036740332, -0.02618002418454278, -0.018609896340735923, 
    -0.04122119759327531, -0.0028174939213690777, -0.0975309439715147, 
    -0.5685844472139162, 0.09998012801771435, -0.6372092679572258, 
    -0.6319290328885425, -0.37436223991967527, -0.37443160310530493, 
    0.7712831058493207, -0.349683030873482, 0.04879489561066655, 
    0.7343425609306344, 1.2587542737799418, 1.0664013456654926, 
    -0.43907816809041417, -0.4801968475158174, -0.28910340026287856, 
    -0.6395319051152512, -0.6248707997445304, -0.38763462350750655, 
    -0.3763870260680415, 0.6528228780141483, -0.11024922321249885, 
    -2.468724163053645, -1.05383839089509, 0.7511112872365361, 
    -0.007760877950036992, -0.004918644383724874, -0.08948642202040107, 
    -0.09507567152556495, -0.8092618187059747, -0.011663642603760032, 
    -0.036651869142258646, -0.024436507262009306, -0.01238515036740332, 
    -0.02618002418454278, -0.018609896340735923, -0.04122119759327531, 
    -0.0028174939213690777, -0.0975309439715147, -0.7257784945454897, 
    -0.25797130922872896, -0.6372092679572258, -0.6319290328885425, 
    -0.37436223991967527, -0.37443160310530493, 0.7712831058493207, 
    -0.349683030873482, 3.4741184775599305, -1.7957509541158747, 
    -0.3943278907591888, 1.0664013456654926, -0.43907816809041417, 
    2.756092007079775, 1.9318680083164992, -0.6395319051152512, 
    -0.6248707997445304, -0.38763462350750655, -0.3763870260680415, 
    -1.529159854943387, -0.11024922321249885, -0.12470615670462065, 
    -0.6867852074966913, 0.7511112872365361, -0.007736518069281645, 
    -0.004918644383724874, -0.08948642202040107, -0.09507567152556495, 
    -0.8092618187059747, -0.011663642603760032, -0.036651869142258646, 
    -0.024436507262009306, -0.01238515036740332, -0.02618002418454278, 
    -0.018609896340735923, -0.04122119759327531, -0.0028174939213690777, 
    -0.0975309439715147, -0.7257784945454897, -0.3681102129968653, 
    -0.6372092679572258, -0.6319290328885425, -0.37436223991967527, 
    -0.37443160310530493, 0.7712831058493207, -0.349683030873482, 
    -0.37455970440553465, 0.038818845638964566, -0.6924246745285402, 
    -0.6932695648116357, -0.33321384013747096, 0.19942381194925693, 
    -0.28910340026287856, -0.6395319051152512, -0.6248707997445304, 
    -0.38763462350750655, -0.3763870260680415, 0.21642633142264128, 
    -0.11024922321249885, -0.12470615670462065, -0.44208308523109213, 
    0.7511112872365361, -0.00771607621130513, -0.00484553284708021, 
    -0.08948642202040107, -0.09507567152556495, 1.2356940323701657, 
    -0.011663642603760032, -0.036651869142258646, -0.024436507262009306, 
    -0.01238515036740332, -0.02618002418454278, -0.018609896340735923, 
    -0.04122119759327531, -0.0028174939213690777, -0.0975309439715147, 
    -0.7170454919159579, -0.3405754870548312, 0.48272731098781957, 
    0.10629177483365683, -0.37436223991967527, -0.37443160310530493, 
    0.7712831058493207, -0.349683030873482, 2.204054677511327, 
    -1.634470092598966, 1.2587542737799418, 1.0664013456654926, 
    -0.43907816809041417, -0.3183824047860378, 0.4216074504825223, 
    -0.5271173560305255, -0.6248707997445304, -0.38763462350750655, 
    -0.3763870260680415, -0.6563667617603728, -0.11024922321249885, 
    -0.12470615670462065, -0.44208308523109213, 0.7511112872365361, 
    -0.00772323086159691, -0.0046368914210772405, -0.08948642202040107, 
    -0.09507567152556495, 1.2356940323701657, -0.011663642603760032, 
    -0.036651869142258646, -0.024436507262009306, -0.01238515036740332, 
    -0.02618002418454278, -0.018609896340735923, -0.04122119759327531, 
    -0.0028174939213690777, -0.0975309439715147, -0.6384484682501711, 
    -0.23043658328669483, -0.6372092679572258, -0.6319290328885425, 
    -0.37436223991967527, -0.37443160310530493, 0.7712831058493207, 
    -0.349683030873482, -0.37455970440553465, -0.7071051388767393, 
    1.2587542737799418, 1.0664013456654926, -0.43907816809041417, 
    -0.4478339589698615, -0.02258683123335326, -0.6395319051152512, 
    -0.6248707997445304, -0.38763462350750655, -0.3763870260680415, 
    0.6528228780141483, -0.11024922321249885, -0.12470615670462065, 
    -0.44208308523109213, -0.36439815827345134, -0.007718801792368665, 
    0.0041581280228405555, -0.08948642202040107, -0.09507567152556495, 
    1.2356940323701657, -0.011663642603760032, -0.036651869142258646, 
    -0.024436507262009306, -0.01238515036740332, -0.02618002418454278, 
    -0.018609896340735923, -0.04122119759327531, -0.0028174939213690777, 
    -0.0975309439715147, -0.6995794866568942, -0.32680812408381416, 
    -0.07724097848470314, -0.07267084522020971, -0.37436223991967527, 
    -0.37443160310530493, 0.7712831058493207, -0.349683030873482, 
    -0.37455970440553465, 0.7343425609306344, 1.2587542737799418, 
    1.0664013456654926, -0.43907816809041417, -0.4801968475158174, 
    -0.28910340026287856, -0.6395319051152512, -0.6248707997445304, 
    -0.38763462350750655, -0.3763870260680415, -0.21997021516886575, 
    -0.11024922321249885, -0.12470615670462065, 2.310815790256898, 
    -0.7362346401101137, -0.00776224074056876, -0.004918644383724874, 
    -0.08948642202040107, -0.09507567152556495, -0.8092618187059747, 
    -0.011663642603760032, -0.036651869142258646, -0.024436507262009306, 
    -0.01238515036740332, -0.02618002418454278, -0.018609896340735923, 
    -0.04122119759327531, -0.0028174939213690777, -0.0975309439715147, 
    1.8417242785368781, -0.037693501692456145, 1.602663889932865, 
    1.6051037177847889, -0.37436223991967527, -0.37443160310530493, 
    -1.3214280114927377, -0.07238850323553762, -0.37455970440553465, 
    0.7343425609306344, -0.8188899767337195, -0.9382870333590839, 
    -0.17441734820805624, -0.4801968475158174, -0.28910340026287856, 
    1.6087590765792643, 1.6189552037455606, -0.38763462350750655, 
    -0.3763870260680415, -0.6563667617603728, -0.11024922321249885, 
    -0.12470615670462065, 1.7602360151593, -0.7362346401101137, 
    -0.00776224074056876, -0.004918644383724874, -0.08948642202040107, 
    -0.09507567152556495, -0.8092618187059747, -0.011663642603760032, 
    -0.036651869142258646, -0.024436507262009306, -0.01238515036740332, 
    -0.02618002418454278, -0.018609896340735923, -0.04122119759327531, 
    -0.0028174939213690777, -0.0975309439715147, 1.6233992127985815, 
    -0.09276295357652434, 1.602663889932865, 1.6051037177847889, 
    -0.37436223991967527, -0.37443160310530493, -1.3214280114927377, 
    -0.1278474087631265, -0.37455970440553465, 0.7343425609306344, 
    -0.8550229202209138, -0.9828356640040744, -0.17441734820805624, 
    -0.4801968475158174, -0.28910340026287856, 1.6087590765792643, 
    1.6189552037455606, -0.38763462350750655, -0.3763870260680415, 
    0.21642633142264128, -0.11024922321249885, -0.12470615670462065, 
    -0.44208308523109213, -1.1080711219467763, 0.0015285837097572432, 
    -0.003103289902411788, -0.08948642202040107, 0.3700492826138522, 
    1.2356940323701657, -0.011663642603760032, -0.036651869142258646, 
    -0.024436507262009306, -0.01238515036740332, -0.02618002418454278, 
    -0.018609896340735923, -0.04122119759327531, -0.0028174939213690777, 
    -0.0975309439715147, -0.7170454919159579, -0.3405754870548312, 
    -0.6372092679572258, -0.6319290328885425, 1.1860202775819033, 
    1.695731838259107, 0.7712831058493207, -0.349683030873482, 
    2.204054677511327, 0.7343425609306344, 1.2587542737799418, 
    1.0664013456654926, -0.43907816809041417, -0.4801968475158174, 
    -0.28910340026287856, -0.6395319051152512, -0.6248707997445304, 
    -0.2571528566543879, -0.251174996119182, -4.147539134492429, 
    -0.11024922321249885, -0.12470615670462065, -0.31973202409829254, 
    -0.7362346401101137, -0.00776224074056876, -0.004918644383724874, 
    -0.08948642202040107, -0.09507567152556495, -0.8092618187059747, 
    -0.011663642603760032, -0.036651869142258646, -0.024436507262009306, 
    -0.01238515036740332, -0.02618002418454278, -0.018609896340735923, 
    -0.04122119759327531, -0.0028174939213690777, -0.0975309439715147, 
    0.5230408814775668, -0.10653031654754139, 1.602663889932865, 
    1.6051037177847889, -0.37436223991967527, -0.37443160310530493, 
    -1.1849468516660815, -0.016929597707948767, -0.37455970440553465, 
    0.7343425609306344, -0.8640561560927122, -0.9828356640040744, 
    -0.17441734820805624, -0.4801968475158174, -0.28910340026287856, 
    1.6087590765792643, 1.6189552037455606, -0.38763462350750655, 
    -0.3763870260680415, -0.6563667617603728
};


const uint8_t y_test[10] = {1, 0, 1, 1, 1, 1, 0, 0, 0, 0}; // Actual labels for each sample

void setup() {
    Serial.begin(115200);
    static tflite::MicroErrorReporter micro_error_reporter;
    error_reporter = &micro_error_reporter;

    const tflite::Model* model = tflite::GetModel(network_model);
    if (model->version() != TFLITE_SCHEMA_VERSION) {
        Serial.println("Model version does not match schema version.");
        return;
    }

    static tflite::MicroMutableOpResolver<10> micro_op_resolver;
    micro_op_resolver.AddFullyConnected();
    micro_op_resolver.AddSoftmax();
    micro_op_resolver.AddQuantize();
    micro_op_resolver.AddDequantize();

    static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, TENSOR_ARENA_SIZE, error_reporter);
    interpreter = &static_interpreter;

    if (interpreter->AllocateTensors() != kTfLiteOk) {
        Serial.println("Failed to allocate tensors!");
        return;
    }

    input = interpreter->input(0);
    output = interpreter->output(0);
}

void loop() {
    for (uint8_t i = 0; i < 10; i++) {
        // Load the i-th test sample data into the input tensor
        for (int j = 0; j < NUMBER_OF_INPUTS; j++) {
            input->data.f[j] = X_test[i][j];
        }

        // Run the model on this input and check for error
        if (interpreter->Invoke() != kTfLiteOk) {
            Serial.println("Failed to invoke!");
            continue;
        }

        // Question 6: Deploying the Quantized Mode
        // (a) mplement code to obtain the prediction from the output tensor and determine the predicted class label.
        float prediction = output->data.f[0]; // INSERT YOUR CODE HERE //;
        int predicted_class = prediction > 0.5 ? 0 : 1; // INSERT YOUR CODE HERE //;

        // (b) Implement code to output Sample #, Predicted Class, and Actual Class for each sample to the serial monitor using Serial.print function.
        const char* labels[] = {"attack", "normal"};
        Serial.println("Sample #" + String(i) + ", Predicted Class: " + labels[predicted_class] + ", Actual Class: " + labels[y_test[i]]);


        // Delay between predictions
        delay(1000);
    }

    // Delay before repeating the tests
    delay(10000);
}
